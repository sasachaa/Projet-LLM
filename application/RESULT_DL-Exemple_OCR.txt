VIP Cheatsheet: Tips and Tricks Afshine AMIDI and Shervine AMIDI November 26, 2018 Data processing Data augmentation Deep learning models usually need a lot of data to be properly trained. Iti is often useful to get more data from the existing ones using data augmentation techniques. The main ones are summed up in the table below. More precisely, given the following input image, here are the techniques that we can apply: Original Flip Rotation Random crop Random focus on one part of the image Several random crops can be done in a row Contrast change Flipped with respect Rotation with to an axis for which a slight angle Image without any modification the meaning of the Simulates incorrect horizon calibration Information loss image is preserved Noise addition Color shift Nuances of RGB is slightly changed Captures noise that can occur with light exposure Addition of noise More tolerance to ignored quality variation of Mimics potential inputs Parts of image Luminosity changes Controls difference in exposition due loss of parts of image to time of day J Batch normalization It is a step of hyperparameter TB that normalizes the batch (xi). By noting HB,a3 the mean and variance of that we want to correct to the batch, it is done as follows:

HB +B tEUR Ti It is usually done after a fully comnected/comvolational layer and before a non-linearity layer and aims at allowing higher learning rates and reducing the strong dependence on initialization. Training a neural network a Epoch  In the context of training a model, epoch is a term used to refer to one iteration a Mini-batch gradient descent  During the training phase, updating weights is usually not based on the whole training set at once due to computation complexities or one data point due to noise issues. Instead, the update step is done on mini-batches, where the number of data Loss function  In order to quantify how a given model performs, the loss function L is usually used to evaluate to what extent the actual outputs y are correctly predicted by the Cross-entropy loss  In the context of binary classification in neural networks, the cross where the model sees the whole training set to update its weights. points in a batch is a hyperparameter that we can tune. model outputs z. entropy loss L(2,9) is commonly used and is defined as follows: L(2,8) =  wlog(s) + (1 w) log(1 2) Backpropagation Backpropagation is a method to update the weights in the neural network by taking into account the actual output and the desired output. The derivative with respect to each weight w is computed using the chain rule. OL Of(z) Of(a) Or OL Of(a) f(z) I Using this method, each weight is updated with the rule: OL(2,8) Ow a a a  Updating weights In a neural network, weights are updated as follows: Step 1: Take a batch of training data and perform forward propagation to compute the Step 2: Backpropagate the loss to get the gradient of the loss with respect to each weight. loss. Step 3: Use the gradients to update the weights of the network.

Forward propagation Backpropagation Weights update Parameter tuning to the architecture. OXavier initialization Instead of initializing the weights in a purely random manner, Xavier initialization enables to have initial weights that take into account characteristics that are unique Transfer learning  Training a deep learning model requires a lot of data and more importantly a lot of time. It is often useful to take advantage of pre-trained weights on huge datasets that took days/weeks to train, and leverage it towards our use case. Depending on how much data we have at hand, here are the different ways to leverage this: Training size Small Illustration Explanation Freezes all layers, trains weights on softmax Freezes most layers, trains weights on last layers and softmax Trains weights on layers and softmax by initializing weights on pre-trained ones Medium Large a Learning rate  The learning rate, often noted a or sometimes T, indicates at which pace the weights get updated. It can be fixed or adaptively changed. The current most popular method Adaptive learning rates Letting the learning rate vary when training a model can reduce the training time and improve the numerical optimal solution. While Adam optimizer is the most commonly used technique, others can also be useful. They are summed up in the table is called Adam, which is a method that adapts the learning rate. below:

Method Explanation Dampens oscillations 2 parameters to tune Root Mean Square propagation Speeds up learning algorithm by controlling oscillations Adaptive Moment estimation Most popular method 4 parameters to tune Update of w w-aldu dw w VSdw w Udw VSdw tEUR Update of b b OUdb bt-b-a b4 b Udb Momentum Improvement to SGD db VSdb VSdb tEUR RMSprop Adam Remark: other methods include Adadelta, Adagrad and SGD. Regularization ODropout Dropout is a technique used in neural networks to prevent overfitting the training data by dropping out neurons with probability P > 0. It forces the model to avoid relying too much on particular sets of features. Remark: most deep leaming. frameworks parametrize dropout through the'keep'parameter 1-p. Weight regularization  In order to make sure that the weights are not too large and that the model is not overfitting the training set, regularization techniques are usually performed on the model weights. The main ones are summed up in the table below: LASSO Shrinks coefficients to 0 Ridge Elastic Net Tradeoff between variable Good for variable selection Makes coefficients smaller selection and small coefficients llells <1 +Xlelli AER llella <1 +X10113 AER a)ilells tolBc1 Aa a)l011+01013 JER,aE [0,1]

a Early stopping This regularization technique stops the training process as soon as the validation loss reaches a plateau or starts to increase. Error Validation Training Epochs early stopping Good practices a Overfitting small batch When debugging a model, it is often useful to make quick tests to see if there is any major issue with the architecture of the model itself. In particular, in order to make sure that the model can be properly trained, a mini-batch is passed inside the network to see if it can overfit on it. Ifit cannot, it means that the model is either too complex or not complex enough to even overfit on a small batch, let alone a normal-sized training set. a Gradient checking Gradient checking is a method used during the implementation of the backward pass of a neural network. It compares the value of the analytical gradient to the numerical gradient at given points and plays the role of a sanity-check for correctness. Numerical gradient df (z) a f(z+h)  f(z h) Expensive; loss has to be computed two times per dimension  Used to verify correctness -Trade-off in choosing h not too small (numerical instability) nor too large (poor gradient approx.) Analytical gradient Ew-ro Formula dx 2h'Exact'result Direct computation Used in the final implementation Comments of analytical implementation